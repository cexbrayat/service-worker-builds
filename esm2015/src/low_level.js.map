{"version":3,"file":"low_level.js","sourceRoot":"","sources":["../../../../packages/service-worker/src/low_level.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAoC,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,EAAG,UAAU,EAAC,MAAM,MAAM,CAAC;AAClG,OAAO,EAAC,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,gBAAgB,CAAC;;AAE1E,aAAa,oBAAoB,GAAG,+DAA+D,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCpG,SAAS,eAAe,CAAC,OAAe;IACtC,OAAO,KAAK,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;CACpD;;;;AAKD,MAAM,OAAO,eAAe;;;;IAgB1B,YAAoB,aAA+C;QAA/C,kBAAa,GAAb,aAAa,CAAkC;QACjE,IAAI,CAAC,aAAa,EAAE;YAClB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,GAAG,eAAe,CAAC,oBAAoB,CAAC,CAAC;SACvF;aAAM;;YACL,MAAM,sBAAsB,qBACP,CAAC,SAAS,CAAC,aAAa,EAAE,kBAAkB,CAAC,CAAC,EAAC;;YACpE,MAAM,iBAAiB,qBAAmC,CACtD,sBAAsB,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,EAAC;;YAEtE,MAAM,iBAAiB,qBACa,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAE,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,EAAC;;YAEjF,MAAM,qBAAqB,qBACS,CAAC,MAAM,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,CAAC,EAAC;YACnF,IAAI,CAAC,MAAM,qBAA8B,CACrC,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAgB,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA,CAAC;YAEnE,IAAI,CAAC,YAAY,qBAA0C,CACvD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,CAAA,CAAC;;YAExE,MAAM,SAAS,GAAG,SAAS,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;;YAEtD,MAAM,eAAe,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAmB,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;;YACjF,MAAM,iBAAiB,GACnB,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,KAAa,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,mBAAC,KAAY,EAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;;YAC3F,MAAM,MAAM,qBAAG,iBAAiB,CAAC,IAAI,CAAC,OAAO,EAAE,CAAyC,EAAC;YACzF,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,MAAM,CAAC,OAAO,EAAE,CAAC;SAClB;KACF;;;;;;;IAKD,WAAW,CAAC,MAAc,EAAE,OAAe;QACzC,OAAO,IAAI,CAAC,MAAM;aACb,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAiB,EAAE,EAAE;YACjC,EAAE,CAAC,WAAW,iBACV,MAAM,IAAK,OAAO,EACpB,CAAC;SACJ,CAAC,CAAC;aACR,SAAS,EAAE;aACX,IAAI,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,CAAC;KAC5B;;;;;;;;IAKD,qBAAqB,CAAC,IAAY,EAAE,OAAe,EAAE,KAAa;;QAChE,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;;QAChD,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QACpD,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,CAAC;KACxE;;;;;IAKD,aAAa,KAAa,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC,EAAE;;;;;;;IAOxE,YAAY,CAAuB,IAAY;QAC7C,yBAAsB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,GAAG,OAAO,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,EAAE,CAAC,CAAC,EAAC;KAC5F;;;;;;;IAOD,eAAe,CAAuB,IAAY;QAChD,yBAAsB,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC;KAC/D;;;;;;IAKD,aAAa,CAAC,KAAa;QACzB,OAAO,IAAI,CAAC,YAAY,CAAc,QAAQ,CAAC;aAC1C,IAAI,CACD,MAAM,CAAC,CAAC,KAAkB,EAAE,EAAE,CAAC,KAAK,CAAC,KAAK,KAAK,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAC9D,GAAG,CAAC,CAAC,KAAkB,EAAE,EAAE;YACzB,IAAI,KAAK,CAAC,MAAM,EAAE;gBAChB,OAAO,SAAS,CAAC;aAClB;YACD,MAAM,IAAI,KAAK,oBAAC,KAAK,CAAC,KAAK,GAAG,CAAC;SAChC,CAAC,CAAC;aACN,SAAS,EAAE,CAAC;KAClB;;;;IAED,IAAI,SAAS,KAAc,OAAO,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;CAC1D","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ConnectableObservable, Observable, concat, defer, fromEvent, of , throwError} from 'rxjs';\nimport {filter, map, publish, switchMap, take, tap} from 'rxjs/operators';\n\nexport const ERR_SW_NOT_SUPPORTED = 'Service workers are disabled or not supported by this browser';\n\nexport interface Version {\n  hash: string;\n  appData?: Object;\n}\n\n/**\n * @experimental\n */\nexport interface UpdateAvailableEvent {\n  type: 'UPDATE_AVAILABLE';\n  current: Version;\n  available: Version;\n}\n\n/**\n * @experimental\n */\nexport interface UpdateActivatedEvent {\n  type: 'UPDATE_ACTIVATED';\n  previous?: Version;\n  current: Version;\n}\n\nexport type IncomingEvent = UpdateAvailableEvent | UpdateActivatedEvent;\n\nexport interface TypedEvent { type: string; }\n\ninterface StatusEvent {\n  type: 'STATUS';\n  nonce: number;\n  status: boolean;\n  error?: string;\n}\n\n\nfunction errorObservable(message: string): Observable<any> {\n  return defer(() => throwError(new Error(message)));\n}\n\n/**\n * @experimental\n*/\nexport class NgswCommChannel {\n  /**\n   * @internal\n   */\n  readonly worker: Observable<ServiceWorker>;\n\n  /**\n   * @internal\n   */\n  readonly registration: Observable<ServiceWorkerRegistration>;\n\n  /**\n   * @internal\n   */\n  readonly events: Observable<TypedEvent>;\n\n  constructor(private serviceWorker: ServiceWorkerContainer|undefined) {\n    if (!serviceWorker) {\n      this.worker = this.events = this.registration = errorObservable(ERR_SW_NOT_SUPPORTED);\n    } else {\n      const controllerChangeEvents =\n          <Observable<any>>(fromEvent(serviceWorker, 'controllerchange'));\n      const controllerChanges = <Observable<ServiceWorker|null>>(\n          controllerChangeEvents.pipe(map(() => serviceWorker.controller)));\n\n      const currentController =\n          <Observable<ServiceWorker|null>>(defer(() => of (serviceWorker.controller)));\n\n      const controllerWithChanges =\n          <Observable<ServiceWorker|null>>(concat(currentController, controllerChanges));\n      this.worker = <Observable<ServiceWorker>>(\n          controllerWithChanges.pipe(filter((c: ServiceWorker) => !!c)));\n\n      this.registration = <Observable<ServiceWorkerRegistration>>(\n          this.worker.pipe(switchMap(() => serviceWorker.getRegistration())));\n\n      const rawEvents = fromEvent(serviceWorker, 'message');\n\n      const rawEventPayload = rawEvents.pipe(map((event: MessageEvent) => event.data));\n      const eventsUnconnected =\n          (rawEventPayload.pipe(filter((event: Object) => !!event && !!(event as any)['type'])));\n      const events = eventsUnconnected.pipe(publish()) as ConnectableObservable<IncomingEvent>;\n      this.events = events;\n      events.connect();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  postMessage(action: string, payload: Object): Promise<void> {\n    return this.worker\n        .pipe(take(1), tap((sw: ServiceWorker) => {\n                sw.postMessage({\n                    action, ...payload,\n                });\n              }))\n        .toPromise()\n        .then(() => undefined);\n  }\n\n  /**\n   * @internal\n   */\n  postMessageWithStatus(type: string, payload: Object, nonce: number): Promise<void> {\n    const waitForStatus = this.waitForStatus(nonce);\n    const postMessage = this.postMessage(type, payload);\n    return Promise.all([waitForStatus, postMessage]).then(() => undefined);\n  }\n\n  /**\n   * @internal\n   */\n  generateNonce(): number { return Math.round(Math.random() * 10000000); }\n\n  /**\n   * @internal\n   */\n  // TODO(i): the typings and casts in this method are wonky, we should revisit it and make the\n  // types flow correctly\n  eventsOfType<T extends TypedEvent>(type: string): Observable<T> {\n    return <Observable<T>>this.events.pipe(filter((event) => { return event.type === type; }));\n  }\n\n  /**\n   * @internal\n   */\n  // TODO(i): the typings and casts in this method are wonky, we should revisit it and make the\n  // types flow correctly\n  nextEventOfType<T extends TypedEvent>(type: string): Observable<T> {\n    return <Observable<T>>(this.eventsOfType(type).pipe(take(1)));\n  }\n\n  /**\n   * @internal\n   */\n  waitForStatus(nonce: number): Promise<void> {\n    return this.eventsOfType<StatusEvent>('STATUS')\n        .pipe(\n            filter((event: StatusEvent) => event.nonce === nonce), take(1),\n            map((event: StatusEvent) => {\n              if (event.status) {\n                return undefined;\n              }\n              throw new Error(event.error !);\n            }))\n        .toPromise();\n  }\n\n  get isEnabled(): boolean { return !!this.serviceWorker; }\n}\n"]}